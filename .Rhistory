knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
matrix <- "FCLGD"
statistic <- "F"
geog_type <- "LGD2014"
geog_code <- "N09000006"
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
url_to_ascii <- function (url) {
symbol <- c("\\{", '"', "\\[", "\\]", "\\}", " ")
ascii <- c("%7B", "%22", "%5B", "%5D", "%7D", "%20")
for (i in 1:length(symbol)) {
url <- gsub(symbol[i], ascii[i], url)
}
return(url);
}
div(style = "width: 100%; background-color: #00205b; padding: 10px; class: row; display: flex; margin-left: 0px; margin-right: 0px; align-items: center",
img(src = "img/TechLab logo monochrome.svg"),
h1(class = "toc-ignore", style = "color: white; margin-left: 20px;", rmarkdown::metadata$title))
json_data <- fromJSON(url_to_ascii(paste0('https://ws-data.nisra.gov.uk/public/api.jsonrpc?data={"jsonrpc":"2.0","method":"PxStat.Data.Cube_API.ReadDataset","params":{"class":"query","id":["STATISTIC","',
geog_type, '"],"dimension":{"STATISTIC":{"category":{"index":["',
statistic, '"]}},"', geog_type, '":{"category":{"index":["', geog_code,
'"]}}},"extension":{"pivot":null,"codes":false,"language":{"code":"en"},"format":{"type":"JSON-stat","version":"2.0"},"matrix":"',
matrix, '"},"version":"2.0"}}')))$result
time_var <- json_data$id[grepl("TLIST", json_data$id)]
graph_data <- data.frame(x = json_data$dimension[[time_var]]$category$index,
y = json_data$value)
unit <- json_data$dimension$STATISTIC$category$unit[[statistic]]$label
year <- tail(json_data$dimension[[time_var]]$category$index, 1)
View(graph_data)
View(graph_data)
json_data <- fromJSON(url_to_ascii(paste0('https://ws-data.nisra.gov.uk/public/api.jsonrpc?data={"jsonrpc":"2.0","method":"PxStat.Data.Cube_API.ReadDataset","params":{"class":"query","id":["STATISTIC","',
geog_type, '"],"dimension":{"STATISTIC":{"category":{"index":["',
statistic, '"]}},"', geog_type, '":{"category":{"index":["', geog_code,
'"]}}},"extension":{"pivot":null,"codes":false,"language":{"code":"en"},"format":{"type":"JSON-stat","version":"2.0"},"matrix":"',
matrix, '"},"version":"2.0"}}')))$result
View(json_data)
View(graph_data)
View(graph_data)
utfToInt(" ")
utf8ToInt(" ")
utf8ToInt("[")
URLencode(paste0('https://ws-data.nisra.gov.uk/public/api.jsonrpc?data={"jsonrpc":"2.0","method":"PxStat.Data.Cube_API.ReadDataset","params":{"class":"query","id":["STATISTIC","',
geog_type, '"],"dimension":{"STATISTIC":{"category":{"index":["',
statistic, '"]}},"', geog_type, '":{"category":{"index":["', geog_code,
'"]}}},"extension":{"pivot":null,"codes":false,"language":{"code":"en"},"format":{"type":"JSON-stat","version":"2.0"},"matrix":"',
matrix, '"},"version":"2.0"}}')))
URLencode(paste0('https://ws-data.nisra.gov.uk/public/api.jsonrpc?data={"jsonrpc":"2.0","method":"PxStat.Data.Cube_API.ReadDataset","params":{"class":"query","id":["STATISTIC","',
geog_type, '"],"dimension":{"STATISTIC":{"category":{"index":["',
statistic, '"]}},"', geog_type, '":{"category":{"index":["', geog_code,
'"]}}},"extension":{"pivot":null,"codes":false,"language":{"code":"en"},"format":{"type":"JSON-stat","version":"2.0"},"matrix":"',
matrix, '"},"version":"2.0"}}'))
rm(json_data)
json_data <- fromJSON(URLencode(paste0('https://ws-data.nisra.gov.uk/public/api.jsonrpc?data={"jsonrpc":"2.0","method":"PxStat.Data.Cube_API.ReadDataset","params":{"class":"query","id":["STATISTIC","',
geog_type, '"],"dimension":{"STATISTIC":{"category":{"index":["',
statistic, '"]}},"', geog_type, '":{"category":{"index":["', geog_code,
'"]}}},"extension":{"pivot":null,"codes":false,"language":{"code":"en"},"format":{"type":"JSON-stat","version":"2.0"},"matrix":"',
matrix, '"},"version":"2.0"}}')))$result
View(json_data)
json_data$value
time_var <- json_data$id[grepl("TLIST", json_data$id)]
graph_data <- data.frame(x = json_data$dimension[[time_var]]$category$index,
y = json_data$value)
unit <- json_data$dimension$STATISTIC$category$unit[[statistic]]$label
year <- tail(json_data$dimension[[time_var]]$category$index, 1)
View(graph_data)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
matrix <- "FCLGD"
statistic <- "F"
geog_type <- "LGD2014"
geog_code <- "N09000006"
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
this_year_val <- tail(graph_data$y, 1)
last_year_val <- tail(graph_data$y, 2)
last_year_val <- tail(graph_data$y, 2)[1]
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
matrix <- "DESCPLGD"
statistic <- "FSME"
geog_type <- "LGD2014"
geog_code <- "N09000003"
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
json_data <- fromJSON(URLencode(paste0('https://ws-data.nisra.gov.uk/public/api.jsonrpc?data={"jsonrpc":"2.0","method":"PxStat.Data.Cube_API.ReadDataset","params":{"class":"query","id":["STATISTIC","',
geog_type, '"],"dimension":{"STATISTIC":{"category":{"index":["',
statistic, '"]}},"', geog_type, '":{"category":{"index":["', geog_code,
'"]}}},"extension":{"pivot":null,"codes":false,"language":{"code":"en"},"format":{"type":"JSON-stat","version":"2.0"},"matrix":"',
matrix, '"},"version":"2.0"}}')))$result
time_var <- json_data$id[grepl("TLIST", json_data$id)]
graph_data <- data.frame(x = json_data$dimension[[time_var]]$category$index,
y = json_data$value)
unit <- json_data$dimension$STATISTIC$category$unit[[statistic]]$label
year <- tail(json_data$dimension[[time_var]]$category$index, 1)
variable <- json_data$dimension$STATISTIC$category$label[[statistic]]
plot_ly(graph_data,
type = "scatter",
mode = "lines+markers",
x = ~x,
y = ~y,
name = json_data$dimension[[geog_type]]$category$label[[geog_code]],
line = list(color = "#3878c5", width = 4),
hovertext = ~paste0(y, " (", unit, ")"),
hoverinfo = "x+text") %>%
layout(showlegend = TRUE,
legend = list(orientation = "h",
yanchor = "bottom",
y = 1,
xanchor = "center",
x = 0.5),
xaxis = list(title = "",
showgrid = FALSE,
linewidth = 1),
yaxis = list(title = "",
showline = TRUE,
linewidth = 1,
tickformat = ",d"),
font = list(family = "Helvetica", size = 14),
hovermode = "x unified")  %>%
config(displaylogo = FALSE)
this_year_val <- tail(graph_data$y, 1)
last_year_val <- tail(graph_data$y, 2)[1]
graph_commentary <- if (this_year_val > last_year_val) {
paste("has increased by", this_year_val - last_year_val, "from", last_year, "to", year)
}
graph_commentary <- if (this_year_val > last_year_val) {
paste("has increased by", this_year_val - last_year_val, "from", last_year, "to", year)
} else if (this_year_val < last_year_val) {
paste("has decreased by", last_year_val - this_year_val, "from", last_year, "to", year)
} else {
paste("has remained the same between", last_year, "and", year)
}
last_year <- tail(graph_data$x, 2)[1]
graph_commentary <- if (this_year_val > last_year_val) {
paste("has increased by", this_year_val - last_year_val, "from", last_year, "to", year)
} else if (this_year_val < last_year_val) {
paste("has decreased by", last_year_val - this_year_val, "from", last_year, "to", year)
} else {
paste("has remained the same between", last_year, "and", year)
}
this_year_val <- tail(graph_data$y, 1)
last_year_val <- tail(graph_data$y, 2)[1]
last_year <- tail(graph_data$x, 2)[1]
if (this_year_val == last_year_val) {
graph_comment <- "remained the same"
} else {
if (this_year_val > last_year_val) {
graph_comment <- "increased"
} else {
graph_comment <- "decreased"
}
graph_comment <- paste(graph_comment, "by", abs(this_year_val - last_year_val))
}
rm(graph_commentary)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
matrix <- "DESCPLGD"
statistic <- "FSME"
geog_type <- "LGD2014"
geog_code <- "N92000002"
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
prettyNum(abs(this_year_val - last_year_val), big.mark = ",")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, out.width = "100%")
matrix <- "DESCPLGD"
statistic <- "FSME"
geog_type <- "LGD2014"
geog_code <- "N09000002"
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
json_data <- fromJSON(URLencode(paste0('https://ws-data.nisra.gov.uk/public/api.jsonrpc?data={"jsonrpc":"2.0","method":"PxStat.Data.Cube_API.ReadDataset","params":{"class":"query","id":["STATISTIC","',
time_var, '"],"dimension":{"STATISTIC":{"category":{"index":["',
statistic, '"]}},"', time_var, '":{"category":{"index":["', year,
'"]}}},"extension":{"pivot":null,"codes":false,"language":{"code":"en"},"format":{"type":"JSON-stat","version":"2.0"},"matrix":"',
matrix, '"},"version":"2.0"}}')))$result
map_data <- st_read("map/OSNI Map Loughs Removed.shp", quiet = TRUE) %>%
left_join(data.frame(LGDCode= json_data$dimension[[geog_type]]$category$index,
value = json_data$value) %>%
filter(LGDCode != "N92000002"),
by = "LGDCode")
names(map_data)[names(map_data) == "value"] <- unit
map_data
max(map_data[[unit]])
greatest_val <- max(map_data[[unit]])
lowest_val <- min(map_data[[unit]])
greatest_area <- map_data$LGDNAME[map_data[[unit]] == greatest_val]
greatest_area <- map_data$LGDNAME[map_data[[unit]] == greatest_val][1]
lowest_area <- map_data$LGDNAME[map_data[[unit]] == lowest_val][1]
greatest_val
greatest_val <- max(map_data[[unit]])
lowest_val <- min(map_data[[unit]])
greatest_area <- map_data$LGDNAME[map_data[[unit]] == greatest_val][1]
lowest_area <- map_data$LGDNAME[map_data[[unit]] == lowest_val][1]
class(greatest_val)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, out.width = "100%")
matrix <- "DESCPLGD"
statistic <- "Nursery"
geog_type <- "LGD2014"
geog_code <- "N09000003"
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
div(style = "width: 100%; background-color: #00205b; padding: 10px; class: row; display: flex; margin-left: 0px; margin-right: 0px; align-items: center",
img(src = "img/TechLab logo monochrome.svg"),
h1(class = "toc-ignore", style = "color: white; margin-left: 20px;", rmarkdown::metadata$title))
json_data <- fromJSON(URLencode(paste0('https://ws-data.nisra.gov.uk/public/api.jsonrpc?data={"jsonrpc":"2.0","method":"PxStat.Data.Cube_API.ReadDataset","params":{"class":"query","id":["STATISTIC","',
geog_type, '"],"dimension":{"STATISTIC":{"category":{"index":["',
statistic, '"]}},"', geog_type, '":{"category":{"index":["', geog_code,
'"]}}},"extension":{"pivot":null,"codes":false,"language":{"code":"en"},"format":{"type":"JSON-stat","version":"2.0"},"matrix":"',
matrix, '"},"version":"2.0"}}')))$result
time_var <- json_data$id[grepl("TLIST", json_data$id)]
graph_data <- data.frame(x = json_data$dimension[[time_var]]$category$index,
y = json_data$value)
unit <- json_data$dimension$STATISTIC$category$unit[[statistic]]$label
year <- tail(json_data$dimension[[time_var]]$category$index, 1)
variable <- json_data$dimension$STATISTIC$category$label[[statistic]]
area <- json_data$dimension[[geog_type]]$category$label[[geog_code]]
updated <- paste(substr(json_data$updated, 9, 10), substr(json_data$updated, 6, 7), substr(json_data$updated, 1, 4), sep = "/")
plot_ly(graph_data,
type = "scatter",
mode = "lines+markers",
x = ~x,
y = ~y,
name = area,
line = list(color = "#3878c5", width = 4),
hovertext = ~paste0(y, " (", unit, ")"),
hoverinfo = "x+text") %>%
layout(showlegend = TRUE,
legend = list(orientation = "h",
yanchor = "bottom",
y = 1,
xanchor = "center",
x = 0.5),
xaxis = list(title = "",
showgrid = FALSE,
linewidth = 1),
yaxis = list(title = "",
showline = TRUE,
linewidth = 1,
tickformat = ",d"),
font = list(family = "Helvetica", size = 14),
hovermode = "x unified")  %>%
config(displaylogo = FALSE)
this_year_val <- tail(graph_data$y, 1)
last_year_val <- tail(graph_data$y, 2)[1]
last_year <- tail(graph_data$x, 2)[1]
if (this_year_val == last_year_val) {
graph_comment <- "remained the same"
} else {
if (this_year_val > last_year_val) {
graph_comment <- "increased"
} else {
graph_comment <- "decreased"
}
graph_comment <- paste(graph_comment, "by", prettyNum(abs(this_year_val - last_year_val), big.mark = ","))
}
json_data <- fromJSON(URLencode(paste0('https://ws-data.nisra.gov.uk/public/api.jsonrpc?data={"jsonrpc":"2.0","method":"PxStat.Data.Cube_API.ReadDataset","params":{"class":"query","id":["STATISTIC","',
time_var, '"],"dimension":{"STATISTIC":{"category":{"index":["',
statistic, '"]}},"', time_var, '":{"category":{"index":["', year,
'"]}}},"extension":{"pivot":null,"codes":false,"language":{"code":"en"},"format":{"type":"JSON-stat","version":"2.0"},"matrix":"',
matrix, '"},"version":"2.0"}}')))$result
map_data <- st_read("map/OSNI Map Loughs Removed.shp", quiet = TRUE) %>%
left_join(data.frame(LGDCode= json_data$dimension[[geog_type]]$category$index,
value = json_data$value) %>%
filter(LGDCode != "N92000002"),
by = "LGDCode")
names(map_data)[names(map_data) == "value"] <- unit
View(map_data)
min(map_data[unit])
min(map_data[[unit]])
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
install.packages("ggplot2")
library(plotly)
library(ggplot2)
install.packages("colorspace")
library(ggplot2)
install.packages("utf8")
library(ggplot2)
library(plotly)
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
library(tmap)
install.packages("XML")
library(tmap)
install.packages("lwgeom")
library(tmap)
install.packages("png")
library(tmap)
install.packages("raster")
p_load("jsonlite", "dplyr", "plotly", "tmap", "sf", "htmltools")
